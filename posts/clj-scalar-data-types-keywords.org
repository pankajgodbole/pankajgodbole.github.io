#+TITLE:       Scalar data types, Part 1 - Keywords
#+DATE:        <2021-07-20 08:57>
#+EMAIL:       pankajsg@gmail.com

#+DESCRIPTION: Data types in Clojure
#+FILETAGS:    clojure datatypes keyword

* Introduction
  - Keywords are a very useful concept that are found in Lisp-like languages
  - Keywords are symbols that refer to (evaluate to) themselves.
  - Because they don't reference any values but themselves, they can be used in numerous ways:
    as keys in maps, as enumerations, as directives, etc.
  - A keyword have a special property in that it evaluates to a function call when placed in the function position of an expression.
  - Uniquely keywords do not belong to any particular namespace; a keyword may be made to appear to belong to the current namespace by prefixing it with two colons instead of just one.

A few simple examples will nicely illustrate the utility of keywords.

#+begin_src clojure
  ;; A keyword by itself is self-referential and self-evaluating

  :human
  ;; :human
#+end_src


* Keywords as a map keys
  - In practice keywords are used to denote the keys in maps

#+begin_src clojure
  ;; Keywords can be used as keys in a Clojure map

  (def bird-sightings {:ravens 3, :golden-eagles 1, :sea-gulls 11})
  ; #'code-snippets.core/bird-sightings
#+end_src

* Keywords as functions
  - In Clojure when a keyword appears in the function position of a list, it does not evaluate to itself, but rather as a function call.

#+begin_src clojure
  (require '(clojure.java [io :as io]))
  ;; nil

  (:require '(clojure.java [shell :as sh]))
  ;; nil
#+end_src

  - So when a keyword is thus applied to a map, the keyword serves as a 'getter' function
  - This results in succint and more readable code.

#+begin_src clojure
  ;; A keyword (k) may be applied to a map of which it is a key to retrieve
  ;; the value associated with k.

  (:golden-eagles bird-sightings)
  ;; 1

  (/ (:ravens bird-sightings) (:golden-eagles bird-sightings))
  ;; 3
#+end_src


* Using keywords for enumeration
   - Because keywords evaluate to themselves, they can serve as enumerators in a Clojure container.
   - Thus keywords can make Clojure source code more readable by making it more descriptive.

#+begin_src clojure
  ;; Keywords serve as effective enumerators

  [:zero :one :two :three :four]
  ;; [:zero :one :two :three :four]
#+end_src


* Keywords as directives
   - Another use for keywords is as directives for functions, macros or multi-methods

In the listing shown below "flamingo" "crane" and "stork" (which are all wading birds) are passed as directives to a function.

#+begin_src clojure
  ;; Keywords can be used as a directive in a function
  ;; :else is also a keyword directive

  (defn wading-bird?
    [b]
    "Takes the name of a bird (b), and returns true if b is a wading bird
  and false otherwise"
    (cond (= b :flamingo) true
	  (= b :stork) true
	  (= b :crane) true
	  :else false))

  (wading-bird? :flamingo)
  ;; true

  (wading-bird? :stork)
  ;; true

  (wading-bird? "humming-bird")
  ;; false
#+end_src


* Qualifying keywords
   - A keyword may be qualified by prefixing it with two colons instead of just one.

#+begin_src clojure
  ;; Keywords named with double colons are 'qualified' with the current
  ;; namespace.

  (def uk :unqualified-keyword)
  uk
  ;; :unqualified-keyword

  (def qk ::qualified-keyword)
  qk
  ;; :insights-into-clojure.core/qualified-keyword
#+end_src

As we can see, when we prefix a keyword with two colons, Clojure automatically qualifies it with the name of the current namespace, which in our case is insights-into-clojure.

  - NOTE A keyword may be qualified by any valid name and not just by a namespace.

#+begin_src clojure
  ;; A keyword may be qualified by any valid Clojure name

  (ns ns-test)
  :my-qualifier/keyword
  ;; :my-qualifier/keyword
#+end_src
