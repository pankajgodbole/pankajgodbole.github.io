#+TITLE:       Scalar data types, Part 2 - Symbols
#+DATE:        <2021-07-23 09:00>
#+EMAIL:       pankajsg@gmail.com

#+DESCRIPTION: An in-depth look into symbols, a scalar datatype in Clojure
#+FILETAGS:    clojure scalar datatypes symbols

* Definition
  - A symbol is something that names, denotes or refers to a thing.
  - Some examples of symbols are pictures, signs, words in natural languages and variables in programming languages and mathematics.
  - In Clojure a symbol is a form supported by the Clojure reader that is used to name objects such as  functions, operators, namespaces and Java classes.

* Symbol naming rules
  - A symbol may comprise any alphanumeric characters and the following characters:
     =+ - * ! ? _â€™ < > /= and =.=
  - =.= and =/= have a special meaning when used to name a symbol:
    * =.= may be used once or more in the middle of a symbol name to denote a fully-qualified classname.
      E.g. =java.lang.Util=.
    * =/= may be used just once to separate the namespace of a symbol from its name.
      E.g. =my-ns/sparrow=.
  - A symbol name containing =.= or =/= is said to be qualified.
  - A symbol name may not begin with a number.
  - Certain symbol names are reserved by Clojure, namely, those beginning or ending with either =.= or =:=.
  - Internally Clojure may use other undocumented characters in symbol names.
  - In the future Clojure may support additional characters for symbol names.

* Properties of Symbols
  - Symbols are roughly analogous to 'identifiers' in non Lisp-like languages.
  - In other languages code can normally only refer to the value named by an identifier, however in Clojure (and other Lisps) code can also refer to the symbol itself, via the special operator ='= or the function =symbol=.
  - The operator ='= is called a /syntax quote/ and expands to the function =quote=.
#+begin_src clojure or
  ;; Refer to a symbol itself via a special operator or function

  'hummingbird
  ;; hummingbird

  (quote hummingbird)
  ;; hummingbird


  ;; Convert a string to a symbol

  (symbol "hummingbird")
  ;; hummingbird

  (symbol? (symbol "hummingbird"))
  ;; true
#+end_src

  - Two symbols are said to be equal if they refer to the same object or different objects of the same value.
  - Two symbols are said to be identical only if they both refer to the same object.
#+begin_src clojure
  ;; Equal symbols refer to objects of the same value.
  (let [s1 'sparrow
	s2 'sparrow]
    [(= s1 s2)
     (identical? s1 s2)])
  ;; [true false]

  ;; Identical symbols refer to the same object.
  (let [owl 'barn-owl
	bird-of-prey owl]
    [(= owl bird-of-prey)
     (identical? owl bird-of-prey)])
  ;; [true true]

  ;; Two symbols having the same name but referring to different objects
  ;; are not identical.
  (identical? 'hummingbird 'hummingbird)
  ;; false
#+end_src

  - Clojure allows metadata to be associated with symbols and other objects.
#+begin_src clojure
  ;; Associating two symbols with the same name with metadata
  ;; results in two non-identical symbols.

  ;; with-meta associates a symbol with metadata
  ;; meta returns the metadata associated with a symbol.
  (let [owl-1 (with-meta 'owl {:habitat "farmland"})
	owl-2 (with-meta 'owl {:habitat "countryside"})]
    [(= owl-1 owl-2)
     (identical? owl-1 owl-2)
     (meta owl-1)
     (meta owl-2)])

  ;; [false false {:habitat "farmland"} {:habitat "countryside"}]
#+end_src

- Like keywords symbols do not belong to any particular namespace.
  This is illustrated in the following example.
#+begin_src clojure
  ;; Accessing a symbol and the value it names.

  (ns birds)
  (def scavenger 'vulture)

  ;; Retrieve the value referred to by a symbol
  scavenger
  ;; vulture

  ;; Syntax-quote when applied to a symbol name returns the name of the symbol
  ;; qualified with the name of the namespace the symbol belongs to.
  `scavenger
  ;; birds/scavenger

  ;; Retrieve the actual Clojure object to which the symbol will resolve.
  (resolve 'scavenger)
  ;; #'birds/scavenger

#+end_src

* Symbolic Programming
  - In Clojure not only can one access a symbol (which refers to a concrete value), but one may also modify or manipulate the symbol itself as if it were a value.
  - The method of programming where the values are manipulated directly is called /numeric programming/ or /numeric computation/
  - Some programming languages, while supporting numeric computation, also support computation one level of abstraction above numeric computation, i.e. at the level of symbols.
  - This type of programming where the symbols are manipulated is called /symbolic programming/ or /symbolic computation/.
  - To provide an anology, symbolic programming is related to numeric programming in much the same way that algrebra is related to arithmetic.
  - Symbolic programming is supported by Lisps such as Common Lisp, Scheme, Clojure and the logic programming language Prolog.
