#+TITLE:       Symbolic Programming in Clojure
#+DATE:        <2021-08-04 09:00>
#+EMAIL:       pankajsg@gmail.com

#+DESCRIPTION: An in-depth look into symbolic programming in Clojure
#+FILETAGS:    symbols symbolic-programming lisp macros

* What is Symbolic Programming?
  - /Symbolic programming/ or /symbolic computating/ is a programming paradigm in which the program treats itself or other similar code as plain data.
  - A symbolic program can manipulate is own code as if it were plain data.
  - Such a program has functions on expressions as well as having functions on numbers, strings, characters, bits and other types of data.
  - Thus, a symbolic program can produce new code and evaluate the new code to produce other results.
  - In symbolic programming it is easy to create complex data structures such as lists, trees and maps.
  - Symbolic programming is supported by Lisps (Common Lisp, Scheme, Clojure, etc) and by the logic programming language Prolog.
  - The expressions in a symbolic programming language are called /symbolic expressions/ or /s-expressions/.

** Symbolic vs Numeric Computing
  - The method of programming where data are manipulated is called /numeric programming/ or /numeric computation/.
  - Symbolic computation is computing with symbols, whereas numeric computation is computing with numbers.
  - If we were to compare computer programming with mathematics we might say that numeric computing is akin to arithmetics while symbolic computating is akin to algrebra.
  - Thus, symbolic programming is an abstraction over numeric programming, just as algrebra is over plain arithmetics.


* Symbolic Programming in Clojure
** =eval= function
  - In a symbolic program it is essential to be able to evaluate the code that is produced by a symbolic program.
  - This is made possible in Clojure by the =eval= function which simply evaluates its argument.

** =quote= Function and the ='= special form
  - In Clojure (as in Lisps in general and in some other languages) every symbol and expression, including the argument to a function, is evaluated as soon as it is read.
  - So, if the reader encounters a symbol it does not recognize, it will complain about it. What if we want to use a symbol as itself, rather than any value it names?
  - Clojure being a symbolic programming language provides a function, =quote= which simply returns its argument verbatim.
  - =quote= is the opposite of =eval= which always evaluates its argument.
  - By using the function =quote=, one can prevent an s-expression from being evaluated and its value being returned, and instead access the s-expression itself.
  - This operation is called /quoting/ and is so common in symbolic programming that is has its own special operator ='=.
  - =quote= is a /special form/ because it does not evaluate its argument unlike a regular function which always first evaluates its argument.

** Backquote special form
  - While quoting is essential and very useful, sometimes it is meaningful to first evaluate an s-expression or a part of it before quoting the result.
  - This is possible via the backquote special form (written as =`=)
  - The =`= special form extends the functionality the familiar ='= special form, in that it enables the programer to mark an expression to evaluate.
  - The special operator =~= (pronounced "unquote") is used to mark the part of the expression to evaluate.

The example given below illustrates succinctly how to use =eval=, ='=, =`= and =~=.

#+begin_src clojure
  ;; quote, eval, backquote and unquote

  (let [b "kingfisher"]
    [b 'b (eval b) `~b])
  ;; ["kingfisher" b "kingfisher" "kingfisher"]
#+end_src

A natural product of symbolic programming using =eval=, ='=, =`= and =~= are macros.

* Macros
** What is a macro?
  - A macro is similar to a function, with one major difference: a macro never evaluates its arguments before executing its body unlike a function which always first evaluates its arguments.
  - The programmer chooses whether or not to evaluate the macro arguments in the body of the macro.
  - Macro code makes use of the symbolic programming functions and special operators, namely, =eval=, ='=, =`= and =~=.
  - Macros provide a means of abstracting over the common parts of any recurring coding pattern in a language, and thus help to extend the feature-set of the language.
  - A macro is processed in two steps:
    1) /Macro expansion/ - First, the macro code is executed and the result is spliced back into the program.
    2) /Evaluation/      - Finally, the program modified with the expanded macro code is evaluated as if it were a regular program.

In the next article we shall take in close look at macros and how and when to use them in Clojure.
