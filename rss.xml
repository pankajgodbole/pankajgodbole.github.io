<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Insights into Clojure]]></title>
<description><![CDATA[Insights into Clojure]]></description>
<link>https://pankajgodbole.github.io/</link>
<lastBuildDate>Wed, 04 Aug 2021 08:31:12 +0530</lastBuildDate>
<item>
  <title><![CDATA[Symbolic Programming in Clojure]]></title>
  <description><![CDATA[

<div id="outline-container-org0fc4cc3" class="outline-2">
<h2 id="org0fc4cc3">What is Symbolic Programming?</h2>
<div class="outline-text-2" id="text-org0fc4cc3">
<ul class="org-ul">
<li><i>Symbolic programming</i> or <i>symbolic computating</i> is a programming paradigm in which the program treats itself or other similar code as plain data.</li>
<li>A symbolic program can manipulate is own code as if it were plain data.</li>
<li>Such a program has functions on expressions as well as having functions on numbers, strings, characters, bits and other types of data.</li>
<li>Thus, a symbolic program can produce new code and evaluate the new code to produce other results.</li>
<li>In symbolic programming it is easy to create complex data structures such as lists, trees and maps.</li>
<li>Symbolic programming is supported by Lisps (Common Lisp, Scheme, Clojure, etc) and by the logic programming language Prolog.</li>
<li>The expressions in a symbolic programming language are called <i>symbolic expressions</i> or <i>s-expressions</i>.</li>
</ul>
</div>

<div id="outline-container-org0b4fc2b" class="outline-3">
<h3 id="org0b4fc2b">Symbolic vs Numeric Computing</h3>
<div class="outline-text-3" id="text-org0b4fc2b">
<ul class="org-ul">
<li>The method of programming where data are manipulated is called <i>numeric programming</i> or <i>numeric computation</i>.</li>
<li>Symbolic computation is computing with symbols, whereas numeric computation is computing with numbers.</li>
<li>If we were to compare computer programming with mathematics we might say that numeric computing is akin to arithmetics while symbolic computating is akin to algrebra.</li>
<li>Thus, symbolic programming is an abstraction over numeric programming, just as algrebra is over plain arithmetics.</li>
</ul>
</div>
</div>
</div>


<div id="outline-container-org98763dd" class="outline-2">
<h2 id="org98763dd">Symbolic Programming in Clojure</h2>
<div class="outline-text-2" id="text-org98763dd">
</div>
<div id="outline-container-org15cced2" class="outline-3">
<h3 id="org15cced2"><code>eval</code> function</h3>
<div class="outline-text-3" id="text-org15cced2">
<ul class="org-ul">
<li>In a symbolic program it is essential to be able to evaluate the code that is produced by a symbolic program.</li>
<li>This is made possible by the <code>eval</code> function which simply evaluates its argument.</li>
</ul>
</div>
</div>

<div id="outline-container-orgdba5b3a" class="outline-3">
<h3 id="orgdba5b3a"><code>quote</code> Function and the <code>'</code> special form</h3>
<div class="outline-text-3" id="text-orgdba5b3a">
<ul class="org-ul">
<li>In Clojure (as in Lisps in general and in some other languages) every symbol and expression, including the argument to a function, is evaluated as soon as it is read.</li>
<li>So, if the reader encounters a symbol it does not recognize, it will complain about it. What if we want to use a symbol as itself, rather than any value it names?</li>
<li>Clojure being a symbolic programming language provides a function, <code>quote</code> which simply returns its argument verbatim.</li>
<li><code>quote</code> is the opposite of <code>eval</code> which always evaluates its argument.</li>
<li>By using the function <code>quote</code>, one can prevent an s-expression from being evaluated and its value being returned, and instead access the s-expression itself.</li>
<li>This operation is called <i>quoting</i> and is so common in symbolic programming that is has its own special operator <code>'</code>.</li>
<li><code>quote</code> is a <i>special form</i> because it does not evaluate its argument unlike a regular function which always first evaluates its argument.</li>
</ul>
</div>
</div>

<div id="outline-container-orgc21ff83" class="outline-3">
<h3 id="orgc21ff83">Backquote special form</h3>
<div class="outline-text-3" id="text-orgc21ff83">
<ul class="org-ul">
<li>While quoting is essential and very useful, sometimes it is meaningful to first evaluate an s-expression or a part of it before quoting the result.</li>
<li>This is possible via the backquote special form (written as <code>`</code>)</li>
<li>The <code>`</code> special form extends the functionality the familiar <code>'</code> special form, in that it enables the programer to mark an expression to evaluate.</li>
<li>The special operator <code>~</code> (pronounced "unquote") is used to mark the part of the expression to evaluate.</li>
</ul>

<p>
The example given below illustrates succinctly how to use <code>eval</code>, <code>'</code>, <code>`</code> and <code>~</code>.
</p>

<div class="org-src-container">
<pre class="src src-clojure">;; quote, eval, backquote and unquote

(let [b "kingfisher"]
  [b 'b (eval b) `~b])
;; ["kingfisher" b "kingfisher" "kingfisher"]
</pre>
</div>

<p>
A natural product of symbolic programming using <code>eval</code>, <code>'</code>, <code>`</code> and <code>~</code> are macros.
</p>
</div>
</div>
</div>

<div id="outline-container-org1365a0a" class="outline-2">
<h2 id="org1365a0a">Macros</h2>
<div class="outline-text-2" id="text-org1365a0a">
</div>
<div id="outline-container-org20e184a" class="outline-3">
<h3 id="org20e184a">What is a macro?</h3>
<div class="outline-text-3" id="text-org20e184a">
<ul class="org-ul">
<li>A macro is similar to a function, with one major difference: a macro never evaluates its arguments before executing its body unlike a function which always first evaluates its arguments.</li>
<li>The programer chooses whether or not to evaluate the macro arguments in the body of the macro.</li>
<li>Macro code makes use of the symbolic programming functions and special operators, namely, <code>eval</code>, <code>'</code>, <code>`</code> and <code>~</code>.</li>
<li>Macros provide a means of abstracting over the common parts of any recurring coding pattern in a language, and thus help to extend the feature-set of the language.</li>
<li>A macro is processed in two steps:
<ol class="org-ol">
<li><i>Macro expansion</i> - First, the macro code is executed and the result is spliced back into the program.</li>
<li><i>Evaluation</i>      - Finally, the program modified with the expanded macro code is evaluated as if it were a regular program.</li>
</ol></li>
</ul>

<p>
In the next article we shall take in close look at macros and how and when to use them in Clojure.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://pankajgodbole.github.io/tags.html">Tags</a>: <a href="https://pankajgodbole.github.io/tag-symbols.html">symbols</a> <a href="https://pankajgodbole.github.io/tag-symbolic-programming.html">symbolic-programming</a> <a href="https://pankajgodbole.github.io/tag-lisp.html">lisp</a> <a href="https://pankajgodbole.github.io/tag-macros.html">macros</a> </div>]]></description>
  <category><![CDATA[symbols]]></category>
  <category><![CDATA[symbolic-programming]]></category>
  <category><![CDATA[lisp]]></category>
  <category><![CDATA[macros]]></category>
  <link>https://pankajgodbole.github.io/symbolic-programming.html</link>
  <pubDate>Wed, 04 Aug 2021 09:00:00 +0530</pubDate>
</item>
<item>
  <title><![CDATA[Scalar data types]]></title>
  <description><![CDATA[

<div id="outline-container-org21b88a0" class="outline-2">
<h2 id="org21b88a0">Definition</h2>
<div class="outline-text-2" id="text-org21b88a0">
<ul class="org-ul">
<li>A scalar datatype is a datatype which represents a single value.</li>
<li>Clojure supports the following datatypes:
<ol class="org-ol">
<li>characters</li>
<li>character strings</li>
<li>numbers</li>
<li>keywords</li>
<li>symbols</li>
</ol></li>
<li>Clojure is a hosted language and is closely knit with its host, Java. This means that the semantics of some of the scalar datatypes are based on those of their Java counterparts.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://pankajgodbole.github.io/tags.html">Tags</a>: <a href="https://pankajgodbole.github.io/tag-scalar.html">scalar</a> <a href="https://pankajgodbole.github.io/tag-datatypes.html">datatypes</a> </div>]]></description>
  <category><![CDATA[scalar]]></category>
  <category><![CDATA[datatypes]]></category>
  <link>https://pankajgodbole.github.io/clj-scalar-data-types.html</link>
  <pubDate>Fri, 23 Jul 2021 09:00:00 +0530</pubDate>
</item>
<item>
  <title><![CDATA[Scalar data types, Part 2 - Symbols]]></title>
  <description><![CDATA[

<div id="outline-container-orgf1f2995" class="outline-2">
<h2 id="orgf1f2995">Definition</h2>
<div class="outline-text-2" id="text-orgf1f2995">
<ul class="org-ul">
<li>A symbol is something that names, denotes or refers to a thing.</li>
<li>Some examples of symbols are pictures, signs, words in natural languages and variables in programming languages and mathematics.</li>
<li>In Clojure a symbol is a form supported by the Clojure reader that is used to name objects such as  functions, operators, namespaces and Java classes.</li>
</ul>
</div>
</div>

<div id="outline-container-orgdfbf078" class="outline-2">
<h2 id="orgdfbf078">Symbol naming rules</h2>
<div class="outline-text-2" id="text-orgdfbf078">
<ul class="org-ul">
<li>A symbol may comprise any alphanumeric characters and the following characters:
<code>+ - * ! ? _â€™ &lt; &gt; /</code> and <code>.</code></li>
<li><code>.</code> and <code>/</code> have a special meaning when used to name a symbol:
<ul class="org-ul">
<li><code>.</code> may be used once or more in the middle of a symbol name to denote a fully-qualified classname.
E.g. <code>java.lang.Util</code>.</li>
<li><code>/</code> may be used just once to separate the namespace of a symbol from its name.
E.g. <code>my-ns/sparrow</code>.</li>
</ul></li>
<li>A symbol name containing <code>.</code> or <code>/</code> is said to be qualified.</li>
<li>A symbol name may not begin with a number.</li>
<li>Certain symbol names are reserved by Clojure, namely, those beginning or ending with either <code>.</code> or <code>:</code>.</li>
<li>Internally Clojure may use other undocumented characters in symbol names.</li>
<li>In the future Clojure may support additional characters for symbol names.</li>
</ul>
</div>
</div>

<div id="outline-container-org4c832f6" class="outline-2">
<h2 id="org4c832f6">Properties of Symbols</h2>
<div class="outline-text-2" id="text-org4c832f6">
<ul class="org-ul">
<li>Symbols are roughly analogous to 'identifiers' in non Lisp-like languages.</li>
<li>In other languages code can normally only refer to the value named by an identifier, however in Clojure (and other Lisps) code can also refer to the symbol itself, via the special operator <code>'</code> or the function <code>symbol</code>.</li>
<li>The operator <code>'</code> is called a <i>syntax quote</i> and expands to the function <code>quote</code>.</li>
</ul>
<div class="org-src-container">
<pre class="src src-clojure">;; Refer to a symbol itself via a special operator or function

'hummingbird
;; hummingbird

(quote hummingbird)
;; hummingbird


;; Convert a string to a symbol

(symbol "hummingbird")
;; hummingbird

(symbol? (symbol "hummingbird"))
;; true
</pre>
</div>

<ul class="org-ul">
<li>Two symbols are said to be equal if they refer to the same object or different objects of the same value.</li>
<li>Two symbols are said to be identical only if they both refer to the same object.</li>
</ul>
<div class="org-src-container">
<pre class="src src-clojure">;; Equal symbols refer to objects of the same value.
(let [s1 'sparrow
      s2 'sparrow]
  [(= s1 s2)
   (identical? s1 s2)])
;; [true false]

;; Identical symbols refer to the same object.
(let [owl 'barn-owl
      bird-of-prey owl]
  [(= owl bird-of-prey)
   (identical? owl bird-of-prey)])
;; [true true]

;; Two symbols having the same name but referring to different objects
;; are not identical.
(identical? 'hummingbird 'hummingbird)
;; false
</pre>
</div>

<ul class="org-ul">
<li>Clojure allows metadata to be associated with symbols and other objects.</li>
</ul>
<div class="org-src-container">
<pre class="src src-clojure">;; Associating two symbols with the same name with metadata
;; results in two non-identical symbols.

;; with-meta associates a symbol with metadata
;; meta returns the metadata associated with a symbol.
(let [owl-1 (with-meta 'owl {:habitat "farmland"})
      owl-2 (with-meta 'owl {:habitat "countryside"})]
  [(= owl-1 owl-2)
   (identical? owl-1 owl-2)
   (meta owl-1)
   (meta owl-2)])

;; [false false {:habitat "farmland"} {:habitat "countryside"}]
</pre>
</div>

<ul class="org-ul">
<li>Like keywords symbols do not belong to any particular namespace.
This is illustrated in the following example.</li>
</ul>
<div class="org-src-container">
<pre class="src src-clojure">;; Accessing a symbol and the value it names.

(ns birds)
(def scavenger 'vulture)

;; Retrieve the value referred to by a symbol
scavenger
;; vulture

;; Syntax-quote when applied to a symbol name returns the name of the symbol
;; qualified with the name of the namespace the symbol belongs to.
`scavenger
;; birds/scavenger

;; Retrieve the actual Clojure object to which the symbol will resolve.
(resolve 'scavenger)
;; #'birds/scavenger

</pre>
</div>
</div>
</div>

<div id="outline-container-org5c377fb" class="outline-2">
<h2 id="org5c377fb">Symbolic Programming</h2>
<div class="outline-text-2" id="text-org5c377fb">
<ul class="org-ul">
<li>In Clojure not only can one access a symbol (which refers to a concrete value), but one may also modify or manipulate the symbol itself as if it were a value.</li>
<li>The method of programming where the values are manipulated directly is called <i>numeric programming</i> or <i>numeric computation</i></li>
<li>Some programming languages, while supporting numeric computation, also support computation one level of abstraction above numeric computation, i.e. at the level of symbols.</li>
<li>This type of programming where the symbols are manipulated is called <i>symbolic programming</i> or <i>symbolic computation</i>.</li>
<li>To provide an anology, symbolic programming is related to numeric programming in much the same way that algrebra is related to arithmetic.</li>
<li>Symbolic programming is supported by Lisps such as Common Lisp, Scheme, Clojure and the logic programming language Prolog.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://pankajgodbole.github.io/tags.html">Tags</a>: <a href="https://pankajgodbole.github.io/tag-clojure.html">clojure</a> <a href="https://pankajgodbole.github.io/tag-scalar.html">scalar</a> <a href="https://pankajgodbole.github.io/tag-datatypes.html">datatypes</a> <a href="https://pankajgodbole.github.io/tag-symbols.html">symbols</a> </div>]]></description>
  <category><![CDATA[clojure]]></category>
  <category><![CDATA[scalar]]></category>
  <category><![CDATA[datatypes]]></category>
  <category><![CDATA[symbols]]></category>
  <link>https://pankajgodbole.github.io/clj-scalar-data-types-symbols.html</link>
  <pubDate>Fri, 23 Jul 2021 09:00:00 +0530</pubDate>
</item>
<item>
  <title><![CDATA[Scalar data types, Part 1 - Keywords]]></title>
  <description><![CDATA[

<div id="outline-container-org226e837" class="outline-2">
<h2 id="org226e837">Introduction</h2>
<div class="outline-text-2" id="text-org226e837">
<ul class="org-ul">
<li>Keywords are a very useful concept that are found in Lisp-like languages</li>
<li>Keywords are symbols that refer to (evaluate to) themselves.</li>
<li>Because they don't reference any values but themselves, they can be used in numerous ways:
as keys in maps, as enumerations, as directives, etc.</li>
<li>A keyword have a special property in that it evaluates to a function call when placed in the function position of an expression.</li>
<li>Uniquely keywords do not belong to any particular namespace; a keyword may be made to appear to belong to the current namespace by prefixing it with two colons instead of just one.</li>
</ul>

<p>
A few simple examples will nicely illustrate the utility of keywords.
</p>

<div class="org-src-container">
<pre class="src src-clojure">;; A keyword by itself is self-referential and self-evaluating

:human
;; :human
</pre>
</div>
</div>
</div>


<div id="outline-container-org95283ff" class="outline-2">
<h2 id="org95283ff">Keywords as a map keys</h2>
<div class="outline-text-2" id="text-org95283ff">
<ul class="org-ul">
<li>In practice keywords are used to denote the keys in maps</li>
</ul>

<div class="org-src-container">
<pre class="src src-clojure">;; Keywords can be used as keys in a Clojure map

(def bird-sightings {:ravens 3, :golden-eagles 1, :sea-gulls 11})
; #'code-snippets.core/bird-sightings
</pre>
</div>
</div>
</div>

<div id="outline-container-orga5e9d5c" class="outline-2">
<h2 id="orga5e9d5c">Keywords as functions</h2>
<div class="outline-text-2" id="text-orga5e9d5c">
<ul class="org-ul">
<li>In Clojure when a keyword appears in the function position of a list, it does not evaluate to itself, but rather as a function call.</li>
</ul>

<div class="org-src-container">
<pre class="src src-clojure">(require '(clojure.java [io :as io]))
;; nil

(:require '(clojure.java [shell :as sh]))
;; nil
</pre>
</div>

<ul class="org-ul">
<li>So when a keyword is thus applied to a map, the keyword serves as a 'getter' function</li>
<li>This results in succint and more readable code.</li>
</ul>

<div class="org-src-container">
<pre class="src src-clojure">;; A keyword (k) may be applied to a map of which it is a key to retrieve
;; the value associated with k.

(:golden-eagles bird-sightings)
;; 1

(/ (:ravens bird-sightings) (:golden-eagles bird-sightings))
;; 3
</pre>
</div>
</div>
</div>


<div id="outline-container-org54f2b8b" class="outline-2">
<h2 id="org54f2b8b">Using keywords for enumeration</h2>
<div class="outline-text-2" id="text-org54f2b8b">
<ul class="org-ul">
<li>Because keywords evaluate to themselves, they can serve as enumerators in a Clojure container.</li>
<li>Thus keywords can make Clojure source code more readable by making it more descriptive.</li>
</ul>

<div class="org-src-container">
<pre class="src src-clojure">;; Keywords serve as effective enumerators

[:zero :one :two :three :four]
;; [:zero :one :two :three :four]
</pre>
</div>
</div>
</div>


<div id="outline-container-org56d9ca7" class="outline-2">
<h2 id="org56d9ca7">Keywords as directives</h2>
<div class="outline-text-2" id="text-org56d9ca7">
<ul class="org-ul">
<li>Another use for keywords is as directives for functions, macros or multi-methods</li>
</ul>

<p>
In the listing shown below "flamingo" "crane" and "stork" (which are all wading birds) are passed as directives to a function.
</p>

<div class="org-src-container">
<pre class="src src-clojure">;; Keywords can be used as a directive in a function
;; :else is also a keyword directive

(defn wading-bird?
  [b]
  "Takes the name of a bird (b), and returns true if b is a wading bird
and false otherwise"
  (cond (= b :flamingo) true
	(= b :stork) true
	(= b :crane) true
	:else false))

(wading-bird? :flamingo)
;; true

(wading-bird? :stork)
;; true

(wading-bird? "humming-bird")
;; false
</pre>
</div>
</div>
</div>


<div id="outline-container-orga01d007" class="outline-2">
<h2 id="orga01d007">Qualifying keywords</h2>
<div class="outline-text-2" id="text-orga01d007">
<ul class="org-ul">
<li>A keyword may be qualified by prefixing it with two colons instead of just one.</li>
</ul>

<div class="org-src-container">
<pre class="src src-clojure">;; Keywords named with double colons are 'qualified' with the current
;; namespace.

(def uk :unqualified-keyword)
uk
;; :unqualified-keyword

(def qk ::qualified-keyword)
qk
;; :insights-into-clojure.core/qualified-keyword
</pre>
</div>

<p>
As we can see, when we prefix a keyword with two colons, Clojure automatically qualifies it with the name of the current namespace, which in our case is insights-into-clojure.
</p>

<ul class="org-ul">
<li>NOTE A keyword may be qualified by any valid name and not just by a namespace.</li>
</ul>

<div class="org-src-container">
<pre class="src src-clojure">;; A keyword may be qualified by any valid Clojure name

(ns ns-test)
:my-qualifier/keyword
;; :my-qualifier/keyword
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://pankajgodbole.github.io/tags.html">Tags</a>: <a href="https://pankajgodbole.github.io/tag-clojure.html">clojure</a> <a href="https://pankajgodbole.github.io/tag-datatypes.html">datatypes</a> <a href="https://pankajgodbole.github.io/tag-keyword.html">keyword</a> </div>]]></description>
  <category><![CDATA[clojure]]></category>
  <category><![CDATA[datatypes]]></category>
  <category><![CDATA[keyword]]></category>
  <link>https://pankajgodbole.github.io/clj-scalar-data-types-keywords.html</link>
  <pubDate>Tue, 20 Jul 2021 08:57:00 +0530</pubDate>
</item>
<item>
  <title><![CDATA[Referential types in Clojure]]></title>
  <description><![CDATA[
<p>
Step one: Install <code>org-static-blog</code>. <br>
Step Two: Execute <code>M-x org-static-blog-create-new-post</code> and write the content. <br>
Step Three: Execute <code>M-x org-static-blog-publish</code> and upload to your webhost. <br>
Done.
Complete..
</p>
<div class="taglist"><a href="https://pankajgodbole.github.io/tags.html">Tags</a>: <a href="https://pankajgodbole.github.io/tag-clojure.html">clojure</a> <a href="https://pankajgodbole.github.io/tag-state.html">state</a> <a href="https://pankajgodbole.github.io/tag-concurrency.html">concurrency</a> </div>]]></description>
  <category><![CDATA[clojure]]></category>
  <category><![CDATA[state]]></category>
  <category><![CDATA[concurrency]]></category>
  <link>https://pankajgodbole.github.io/clj-reference-types.html</link>
  <pubDate>Tue, 20 Jul 2021 08:57:00 +0530</pubDate>
</item>
</channel>
</rss>
